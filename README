The enclosed Python 3 modules define a number of “cell magics” for use
in an IPython/Jupyter notebook. To define a magic for use in a
notebook, either copy and paste the module contents into a cell, or
use the standard `%load` magic to load the contents into a cell, which
can then be executed, or you can define the magic directly with the
`%run` magic, for example

    %run /path/to/ps_magic.py

Then you can check that the corresponding magic has been defined by
examining its help string in the usual way, e.g.

    %%ps?

## setvar_magic ##

The `%%setvar` magic lets you hold a lot of text in a notebook cell
and easily assign it to a Python variable for subsequent manipulation.
The text can be assigned as a single string, or split into a list of
lines.

## ps_magic ##

The `%%ps` magic uses the Ghostscript interpreter to execute
PostScript code. Type your PostScript code into a cell, and put “%%ps”
as the first line. When you execute the cell, a new process will be
created running the Ghostscript interpreter, which will be fed the
cell contents for interpretation. Any text or graphics (or both) it
generates will be displayed in the notebook as the output of the cell.

Note that, unlike a custom Jupyter kernel, there is no context
preserved across multiple cells; the PostScript code in each cell must
be self-contained.

Textual output is whatever is written to the standard output of the
Ghostscript process by PostScript commands such as “`=`” and “`print`”,
while graphical output is whatever is drawn on the page and presented
using “`showpage`”.

Text output can be displayed as plain text, or formatted as HTML or
Markdown. This can include mathematical formulae as is usual with
formatted output in IPython. For example, this prints a table of
likely candidates for valid physical formulas:

    %%ps --text=html
    /TempStr 31 string def
    (<table>\n<tr><th colspan="2">Dimensional Analysis</th></tr>\n) print
    1 1 3
      {
        (<tr><td>$E = mc) print
        dup 1 ne
            {(^) print dup TempStr cvs print}
        if
        ($</td><td>) print
        2 eq
            {(<b>Possible</b>)}
            {(Rubbish)}
        ifelse
        print
        (</td></tr>\n) print
      }
    for
    (</table>\n) print
    flush

Graphical output can be in either PNG (default) or PDF. PNG only
allows for a single page, and is resolution-dependent. PDF allows for
multiple pages (each “`showpage`” call you make produces a new page),
and can be resolution-independent. For example, this prints two pies,
segmented into RGB and CMYK primary colours:

    %%ps --papersize=250x500
    /explode % explodes an array or dictionary into its components.
      {
        {} forall
      }
    def % explode

    /CMYK % array of procedures for trying each CMYK colour in turn
      [
          [
            [1.0 0.0 0.0 0.0]
            [0.0 1.0 0.0 0.0]
            [0.0 0.0 1.0 0.0]
            [0.0 0.0 0.0 1.0]
          ]
          { % forall
            explode /setcmykcolor load
            5 array astore cvx
          }
        forall
      ]
    def % CMYK

    /RGB % array of procedures for trying each RGB colour in turn.
      [
          [
            [1.0 0.0 0.0]
            [0.0 1.0 0.0]
            [0.0 0.0 1.0]
          ]
          { % forall
            explode /setrgbcolor load
            4 array astore cvx
          }
        forall
      ]
    def % RGB

    /PieSegments % x y r Colors PieSegments --
      {
        LocalDict % placeholder for local dictionary
        begin
        /Colors exch def
        /Radius exch def
        /YCenter exch def
        /XCenter exch def
        /NrColors Colors length def
        /AngleStep 360 NrColors div def
        /CurAngle -15 def
        /Index 0 def
          { % loop
            Index NrColors eq {exit} if
            Colors Index get exec
            newpath
            XCenter YCenter moveto
            XCenter YCenter Radius CurAngle dup AngleStep add arc
            XCenter YCenter lineto
            fill
            /CurAngle CurAngle AngleStep add def
            /Index Index 1 add def
          }
        loop
        end % LocalDict
      }
    dup 0 10 dict put % create and insert LocalDict
    def % PieSegments

    120 120 100 CMYK PieSegments
    120 370 100 RGB PieSegments

    showpage

Lawrence D'Oliveiro <ldo@geek-central.gen.nz>
2016 June 4

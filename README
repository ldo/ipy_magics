The enclosed Python 3 modules define a number of “cell magics” for use
in an IPython notebook. To define a magic for use in a notebook,
either copy and paste the module contents into a cell, or use the
standard `%load` magic to load the contents into a cell, which can
then be executed, or you can define the magic directly with the `%run`
magic, for example

    %run /path/to/ps_magic.py

Then you can check that the corresponding magic has been defined by
examining its help string in the usual way, e.g.

    %%ps?

## Variable-Setting Magic ##

The `%%setvar` magic (defined in the file `setvar_magic.py`) lets you
hold a lot of text in a notebook cell and easily assign it to a Python
variable for subsequent manipulation. The text can be assigned as a
single string, or split into a list of lines.

## PostScript Magic ##

The `%%ps` magic (defined in the file `ps_magic.py`) uses the
[Ghostscript](http://www.ghostscript.com/) interpreter to execute
PostScript code. Type your PostScript code into a cell, and put
“`%%ps`” as the first line. When you execute the cell, a new process
will be created running the Ghostscript interpreter, which will be fed
the cell contents for interpretation. Any text or graphics (or both)
it generates will be displayed in the notebook as the output of the
cell.

Note that, unlike a custom Jupyter kernel, there is no context
preserved across multiple cells; the PostScript code in each cell must
be self-contained.

Textual output is whatever is written to the standard output of the
Ghostscript process by PostScript commands such as “`=`” and “`print`”,
while graphical output is whatever is drawn on the page and presented
using “`showpage`”.

Text output can be displayed as plain text, or formatted as HTML or
Markdown. This can include mathematical formulae as is usual with
formatted output in IPython. For example, this prints a table of
likely candidates for valid physical formulas:

    %%ps --text=html
    /TempStr 31 string def
    (<table>\n<tr><th colspan="2">Dimensional Analysis</th></tr>\n) print
    1 1 3
      {
        (<tr><td>$E = mc) print
        dup 1 ne
            {(^) print dup TempStr cvs print}
        if
        ($</td><td>) print
        2 eq
            {(<b>Possible</b>)}
            {(Rubbish)}
        ifelse
        print
        (</td></tr>\n) print
      }
    for
    (</table>\n) print
    flush

Graphical output can be in either PNG (default) or PDF. PNG only
allows for a single page, and is resolution-dependent. PDF allows for
multiple pages (each “`showpage`” call you make produces a new page),
and can be resolution-independent. The paper size can be specified
using standard names like “`a4`”, or a custom size can be defined
as “*w*`×`*h*”, where *w* and *h* are the width and height in points
(1 point = 1/72 inch or 1/28.35 cm).

For example, this prints two pies, segmented into RGB and CMYK primary
colours:

    %%ps --papersize=250x500
    /explode % explodes an array or dictionary into its components.
      {
        {} forall
      }
    def % explode

    /CMYK % array of procedures for trying each CMYK colour in turn
      [
          [
            [1.0 0.0 0.0 0.0]
            [0.0 1.0 0.0 0.0]
            [0.0 0.0 1.0 0.0]
            [0.0 0.0 0.0 1.0]
          ]
          { % forall
            explode /setcmykcolor load
            5 array astore cvx
          }
        forall
      ]
    def % CMYK

    /RGB % array of procedures for trying each RGB colour in turn.
      [
          [
            [1.0 0.0 0.0]
            [0.0 1.0 0.0]
            [0.0 0.0 1.0]
          ]
          { % forall
            explode /setrgbcolor load
            4 array astore cvx
          }
        forall
      ]
    def % RGB

    /PieSegments % x y r Colors PieSegments --
      {
        LocalDict % placeholder for local dictionary
        begin
        /Colors exch def
        /Radius exch def
        /YCenter exch def
        /XCenter exch def
        /NrColors Colors length def
        /AngleStep 360 NrColors div def
        /CurAngle -15 def
        /Index 0 def
          { % loop
            Index NrColors eq {exit} if
            Colors Index get exec
            newpath
            XCenter YCenter moveto
            XCenter YCenter Radius CurAngle dup AngleStep add arc
            XCenter YCenter lineto
            fill
            /CurAngle CurAngle AngleStep add def
            /Index Index 1 add def
          }
        loop
        end % LocalDict
      }
    dup 0 10 dict put % create and insert LocalDict
    def % PieSegments

    120 120 100 CMYK PieSegments
    120 370 100 RGB PieSegments

    showpage

## RenderMan Magic ##

The `%%rman` magic (defined in the file `rman_magic.py`) uses
[Aqsis](http://www.aqsis.org/index.html) to render a 3D scene defined
using the Pixar RenderMan language. Scene definition will often be
quite complex, involving multiple files. For example, shader
definitions must be in separate `.sl` files, and a render defined in
one `.rib` file may have its output used as a texture in a later
render.

To cope with all of this, the `%%rman` magic recognizes a set of
“submagics”—effectively its own set of IPython-style “line magics”,
identified by lines beginning with a single “`%`” sign. These are used
to divide the cell contents into parts that are to be interpreted as
though they are held in separate Aqsis input files. It is also
possible to reference external files, where it might not be practical
to include the contents of these in a notebook cell.

The valid submagics are as follows:

* `%autodisplay`

    may be specified in an inline RIB data section (see `%rib`
    below) to generate a `Display` directive that will save
    the render to a unique output image file name. The contents
    of this file will be displayed as part of the cell output.

* `%display` *filename*

    useful in the situation where `%%rman` cannot automatically
    figure out which images to display (such as when “framebuffer”
    display directives occur in nested archive files). You can
    explicitly specify the name of a rendered output file to
    be displayed as part of the cell output.

* `%include` *filename*

    includes another file at this point in a RIB or shader data.
    Note that submagics are not recognized in the included file.

* `%rib`

    indicates the start of an inline RIB data section.
    The subsequent RIB data will be saved to a unique temporary
    file name and rendered when the end of the data is reached.
    You can use `Display` directives to save renders to files
    for reference in subsequent RIB data, but do *not* do
    any `framebuffer` displays. To indicate render output
    that is to be displayed, use the `%autodisplay` submagic
    (above) to generate the appropriate `Display` line.

* `%ribfile` [`--autodisplay` | `--noautodisplay`] *ribfilename*

    renders a separate RIB file *ribfilename*. The treatment
    of any `Display` lines in this file depends on the specified
    option:

    + `--autodisplay`

        The output filenames specified in all `Display`
        directives are automatically displayed as
        cell output.

    + `--noautodisplay`

        The RIB file is processed without special
        interpretation of `Display` lines, except that
        `framebuffer` display lines are ignored.

    + neither

        Output filenames specified in `Display` directives
        specifying `framebuffer` mode are automatically
        displayed as cell output.

* `%sl` *shader_name*

    indicates the start of an inline shader data section. The
    subsequent shader data will be saved to a file named
    *shader_name*`.sl` and automatically compiled. The shader name can
    then be referenced via directives such as `LightSource` and
    `Surface` in subsequent RIB data.

* `%slfile` *shader_filename*

    compiles a separate shader file *shader_filename*. As with the
    `%sl` submagic, the shader name (the base name part of
    *shader_filename* without any parent directory or `.sl` suffix)
    can be referenced in subsequent RIB data.

* `%teqser` [*options*] *infilename* *outfilename*

    invokes the `teqser` command with the specified options.
    Most of the teqser options will work, except they must
    have 2 dashes on the front instead of one. Input files will
    be looked for in the --texture-search and --resource-search
    paths.

The `%%rman` magic itself takes additional options to control
its behaviour:

* `--source-search=`*paths*

    specifies directories in which to look for files referenced in
    `%include`, `%ribfile` and `%slfile` submagics. *paths* follows
    the Aqsis convention of consisting of a colon-separated sequence
    of path strings, where the special value `&` can be used to insert
    the previous search path string (the initial value being
    equivalent to “`.`”, representing the temporary work directory).

* `--timeout=`*timeout*

    specifies the maximum number of seconds to wait for subprocesses
    to respond. The default is infinite.

* `--verbose=`*verbosity*

    specifies the integer verbosity level 0..3 for Aqsis. The default
    is 1.

* `--archive-search=`*paths*

    tells Aqsis where to find additional `.rib` files referenced in
    the `ReadArchive` directive.

* `--resource-search=`*paths*

    specifies paths to be used for all of `--source-search`,
    `--archive-search`, `--shader-search` and `--texture-search`.

* `--shader-search=`*paths*

    tells Aqsis where to find *compiled* shaders. The value here is
    passed straight through to the `-shader` option to Aqsis. If there
    are additional precompiled shaders (`.slx` files) that you want to
    use, that you haven’t told the `%%rman` magic to compile for you,
    then you can tell Aqsis where to find them here. Don’t forget to
    include the special `&` value somewhere if you want Aqsis to find
    any shaders you compiled with the `%sl` submagic.

* `--texture-search=`*paths*

    tells Aqsis where to find texture files (other than those that
    might have been produced as a result of rendering prior `.rib`
    data). The value here is passed straight through to the `-texture`
    option to Aqsis. Don’t forget to include the special `&` value
    somewhere if you want Aqsis to find the rendered output from any
    prior `%rib` or `%ribfile` submagics.

For example, the cell content

    %%rman --source-search="&:/usr/share/aqsis/examples/scenes/vase:/usr/share/aqsis/shaders"
    %slfile displacement/dented.sl
    %slfile light/shadowspot.sl
    %ribfile vase.rib

will render the “vase” example scene that is part of the
`aqsis-examples` package included with Debian. Notice how the
`--source-search` line includes an appropriate entry to allow the
`%slfile` submagics to find their files using shorter names; of
course, the full pathnames could have been put into those submagics
instead.

For another example, the following

    %%rman --resource-search="/usr/share/aqsis/examples/scenes/fisheye:&" --verbose=0
    %slfile fisheye_projection.sl
    %ribfile envmap.rib
    %ribfile fisheye.rib
    %ribfile scene.rib

will render the “fisheye” example scene. That directory includes a `render.sh`
shell script that does the rendering from the command line; the above
directives effectively recreate the stages of that render script
using the `%%rman` magic and its submagics. Since the `Display`
directives in the `.rib` files include two with the `framebuffer`
mode, you will see two images displayed.

Lawrence D'Oliveiro <ldo@geek-central.gen.nz>
2016 June 6
